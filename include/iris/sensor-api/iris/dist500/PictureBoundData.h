// ***************************************************************************
// *    _      _       ____                                 _    ____ ___    *
// *   (_)_ __(_)___  / ___|  ___ _ __  ___  ___  _ __     / \  |  _ \_ _|   *
// *   | | '__| / __| \___ \ / _ \ '_ \/ __|/ _ \| '__|   / _ \ | |_) | |    *
// *   | | |  | \__ \  ___) |  __/ | | \__ \ (_) | |     / ___ \|  __/| |    *
// *   |_|_|  |_|___/ |____/ \___|_| |_|___/\___/|_|    /_/   \_\_|  |___|   *
// *                                                                         *
// *   Copyright (c) 2010 by iris-GmbH, Berlin         All rights reserved   *
// *                                                                         *
// ***************************************************************************

// ---------------------------------------------------------------------------
// Please refer to LICENSE.TXT for more information on copyright and licensing
// terms with respect to this library and its source codes.
// ---------------------------------------------------------------------------

#ifndef DIST500_PICTUREBOUNDDATA_H
#define DIST500_PICTUREBOUNDDATA_H

// iris includes
#include "iris/Common.h"

namespace iris {

namespace dist500 {

/**
 * Encapsulates a set of data which is generated by the sensor at a certain
 * point in time
 */
class SENSORAPI PictureBoundData {

protected:

    /**
     * Holds the picture number (created by sensor)
     */
    unsigned long pictureNumber;

    /**
     * Holds the timestamp (created by sensor)
     */
    unsigned long long timestamp;

    unsigned char sensorNo;

public:

    /**
     * Constructor
     *
     * @param pictureNumber Picture number (created by sensor)
     * @param timestamp Timestamp (created by sensor)
     */
    PictureBoundData(unsigned long pictureNumber, unsigned long long timestamp);

    /**
     * Returns the picture number
     *
     * @return Picture number
     */
    unsigned long getPictureNumber(void);

    /**
     * Returns the timestamp
     *
     * @return Timestamp
     */
    unsigned long long getTimestamp(void);

    /**
     * Changes the timestamp
     *
     * @param timestamp New timestamp value
     */
    void setTimestamp(unsigned long long timestamp);

    /**
     * Changes the picture number
     *
     * @param pictureNumber New picture number
     */
    void setPictureNumber(unsigned long pictureNumber);

    void setSensorNo(const unsigned char no);

    unsigned char getSensorNo(void) const;

}; // class PictureBoundData

} // namespace dist500

} // namespace iris

#endif // DIST500_PICTUREBOUNDDATA_H
